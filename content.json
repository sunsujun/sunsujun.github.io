{"meta":{"title":"大刀又来了","subtitle":null,"description":"我大刀又又又又又又又又又又又又又又又又又又又又又又又又又来了","author":"sujun.sun","url":"http://sunsujun.github.io","root":"/"},"pages":[{"title":"tags","date":"2019-07-09T03:42:17.000Z","updated":"2019-07-09T03:42:47.400Z","comments":true,"path":"tags/index.html","permalink":"http://sunsujun.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-07-09T03:39:30.000Z","updated":"2019-07-09T03:43:01.885Z","comments":true,"path":"categories/index.html","permalink":"http://sunsujun.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"ios Universal Links 探究","slug":"ios-Universal-Links-探究","date":"2019-12-05T08:40:41.000Z","updated":"2019-12-06T03:41:23.986Z","comments":true,"path":"2019/12/05/ios-Universal-Links-探究/","link":"","permalink":"http://sunsujun.github.io/2019/12/05/ios-Universal-Links-探究/","excerpt":"","text":"12345678910participant Aliceparticipant BobAlice-&gt;&gt;John: Hello John, how are you?loop Healthcheck John-&gt;&gt;John: Fight against hypochondriaendNote right of John: Rational thoughts &lt;br/&gt;prevail...John--&gt;&gt;Alice: Great!John-&gt;&gt;Bob: How about you?Bob--&gt;&gt;John: Jolly good!","categories":[{"name":"iOS","slug":"iOS","permalink":"http://sunsujun.github.io/categories/iOS/"}],"tags":[]},{"title":"cocoapods命令详解","slug":"命令详解","date":"2019-08-13T06:27:11.000Z","updated":"2019-12-05T02:59:43.284Z","comments":true,"path":"2019/08/13/命令详解/","link":"","permalink":"http://sunsujun.github.io/2019/08/13/命令详解/","excerpt":"","text":"常用命令 命令编码 说明 pod install 安装，不会更新已经安装的库 pod install –verbose –no -repo -update 作用与pod install一样，但是不会获取更新的pod specs pod update 在没有指定pod库的版本的情况下，拉取 repo 中最新的版本 pod update xxx 更新指定库 pod update –verbose –no -repo -update 作用与pod update一样，但是不会获取更新的pod specs pod repo update 更新本地仓库 pod search xxx 搜索xxx库 pod –version cocoapods 版本号","categories":[],"tags":[]},{"title":"网络请求之NSURLRequest","slug":"网络请求之NSURLRequest","date":"2019-07-17T06:25:51.000Z","updated":"2019-07-18T07:34:40.907Z","comments":true,"path":"2019/07/17/网络请求之NSURLRequest/","link":"","permalink":"http://sunsujun.github.io/2019/07/17/网络请求之NSURLRequest/","excerpt":"","text":"BG&ensp;&ensp;&ensp;&ensp;在网络编程过程中无论是 NSURLSession 还是 NSURLConnection，其其网络请求都是通过 NSURLRequest 进行发起的，这里主要讲讲 NSURLRequest 的用法及其属性设置 NSURLRequest中常用方法及属性&ensp;&ensp;&ensp;&ensp; NSURLRequest 除了在创建时可以设置一些属性，当创建完成时，大部分属性都为只读属性，无法设置与修改，如果想修改则可以使用NSMutableURLRequest 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384// request 缓存策略typedef NS_ENUM(NSUInteger, NSURLRequestCachePolicy) &#123;// 默认缓存策略,具体的工作:如果一个 NSCachedURLResponse 对于请求不存在，数据将会从源端获取，如果请求拥有一个缓存的响应，那么 URL 加载系统会检查这个响应来决定，如果它指定内容必须重新生效的话，加入内容必须重新生效，将建立一个连向源端的连接，来查看内容是否发生变化，如果没有发生变化，那么响应就从本地缓存返回数据，如果内容发生变化m，那么数据将从源端获取NSURLRequestUseProtocolCachePolicy = 0,// URL每次加载数据都是从源端获取，不使用本地缓存数据NSURLRequestReloadIgnoringLocalCacheData = 1,// 不仅忽略本地缓存，同时也忽略代理服务器或其他中间介质目前已有的、协议允许的缓存。NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4, // Unimplemented// 同NSURLRequestReloadIgnoringLocalCacheDataNSURLRequestReloadIgnoringCacheData = NSURLRequestReloadIgnoringLocalCacheData,// 先检查缓存 如果没有缓存再进行请求NSURLRequestReturnCacheDataElseLoad = 2,// 类似离线模式，只读缓存 无论有无缓存都不进行请求,指定已存的缓存数据用来满足请求，不管生命时长和过期时间。如果在缓存中没有已存数据来响应URL加载请求的话，不去尝试从源段加载数据，此时认为加载请求失败。NSURLRequestReturnCacheDataDontLoad = 3,// 指定如果已存的缓存数据被提供它的源段确认为有效则允许使用缓存数据响应请求，否则从源段加载数据。NSURLRequestReloadRevalidatingCacheData = 5, // Unimplemented&#125;;// 网络请求服务类型typedef NS_ENUM(NSUInteger, NSURLRequestNetworkServiceType)&#123;NSURLNetworkServiceTypeDefault = 0, // Standard internet traffic 标准NSURLNetworkServiceTypeVoIP = 1, // Voice over IP control traffic IP 语音NSURLNetworkServiceTypeVideo = 2, // Video traffic 视频NSURLNetworkServiceTypeBackground = 3, // Background traffic 后台服务（如文件下载等）NSURLNetworkServiceTypeVoice = 4, // Voice data 语音NSURLNetworkServiceTypeResponsiveData = 6, // Responsive data 常用于用户需要快速得到响应的场景，如即时通讯、完成购买活动等，优先级比NSURLNetworkServiceTypeDefault高NSURLNetworkServiceTypeCallSignaling API_AVAILABLE(macosx(10.12), ios(10.0), watchos(3.0), tvos(10.0)) = 11, // Call Signaling 呼叫信号&#125;;/*! 类方法初始化方法，默认缓存策略为NSURLRequestUseProtocolCachePolicy 请求超时时间为60s*/+ (instancetype)requestWithURL:(NSURL *)URL;//是否支持安全编码@property (class, readonly) BOOL supportsSecureCoding;/*! 类方法初始化方法，创建时可以设置缓存策略和请求超时时长*/+ (instancetype)requestWithURL:(NSURL *)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval;/*! init初始化方法，默认缓存策略为NSURLRequestUseProtocolCachePolicy 请求超时时间为60s*/- (instancetype)initWithURL:(NSURL *)URL;/*! init初始化方法，创建时可以设置缓存策略和请求超时时长*/- (instancetype)initWithURL:(NSURL *)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval NS_DESIGNATED_INITIALIZER;/*! 只读，获取请求对象 URL*/@property (nullable, readonly, copy) NSURL *URL;/*! 只读，获取请求对象缓存策略*/@property (readonly) NSURLRequestCachePolicy cachePolicy;/*! 只读，获取请求对象超时时间 */@property (readonly) NSTimeInterval timeoutInterval;/*!只读，获取请求主文档地址,用来存放缓存*/@property (nullable, readonly, copy) NSURL *mainDocumentURL;/*!获取网络请求的服务类型*/@property (readonly) NSURLRequestNetworkServiceType networkServiceType API_AVAILABLE(macos(10.7), ios(4.0), watchos(2.0), tvos(9.0));/*!是否允许使用服务商蜂窝网络*/@property (readonly) BOOL allowsCellularAccess API_AVAILABLE(macos(10.8), ios(6.0), watchos(2.0), tvos(9.0));@end NSMutableURLRequest类中常用方法与属性1234567891011121314151617181920212223242526272829/*! 设置请求 URL*/@property (nullable, copy) NSURL *URL;/*! 设置请求的缓存策略*/@property NSURLRequestCachePolicy cachePolicy;/*! 设置请求超时时长*/@property NSTimeInterval timeoutInterval;/*!请求主文档地址*/@property (nullable, copy) NSURL *mainDocumentURL;/*!设置网络服务类型*/@property NSURLRequestNetworkServiceType networkServiceType API_AVAILABLE(macos(10.7), ios(4.0), watchos(2.0), tvos(9.0));/*!设置是否允许使用服务商蜂窝网络默认 YES*/@property BOOL allowsCellularAccess API_AVAILABLE(macos(10.8), ios(6.0), watchos(2.0), tvos(9.0)); NSURLRequest(NSHTTPURLRequest） 常用方法与属性123456789101112131415161718192021222324252627282930313233343536/*!获取HTTP 请求方式*/@property (nullable, readonly, copy) NSString *HTTPMethod;/*!获取HTTP请求头的键值数据*/@property (nullable, readonly, copy) NSDictionary&lt;NSString *, NSString *&gt; *allHTTPHeaderFields;/*! 获取请求头键值数据*/- (nullable NSString *)valueForHTTPHeaderField:(NSString *)field;/*!获取请求体 */@property (nullable, readonly, copy) NSData *HTTPBody;/*!获取请求体输入流*/@property (nullable, readonly, retain) NSInputStream *HTTPBodyStream;/*!获取发送请求是否发送 cookie 数据*/@property (readonly) BOOL HTTPShouldHandleCookies;/*!获取请求是否按顺序收发，默认禁用 在某些服务器中设为YES可以提高网络性能*/@property (readonly) BOOL HTTPShouldUsePipelining API_AVAILABLE(macos(10.7), ios(4.0), watchos(2.0), tvos(9.0));@end NSMutableHTTPURLRequest(NSMutableHTTPURLRequest)123456789101112131415161718192021222324252627282930313233343536373839/*!设置HPPT请求方式 默认为GET*/@property (copy) NSString *HTTPMethod;/*!通过字典设置HTTP请求头的键值数据*/@property (nullable, copy) NSDictionary&lt;NSString *, NSString *&gt; *allHTTPHeaderFields;/*! 设置http请求头中的字段值 */- (void)setValue:(nullable NSString *)value forHTTPHeaderField:(NSString *)field;/*! 向http请求头中添加一个字段*/- (void)addValue:(NSString *)value forHTTPHeaderField:(NSString *)field;/*!设置http请求体 用于POST请求*/@property (nullable, copy) NSData *HTTPBody;/*!设置http请求体的输入流*/@property (nullable, retain) NSInputStream *HTTPBodyStream;/*!设置发送请求时是否发送cookie数据*/@property BOOL HTTPShouldHandleCookies;/*!//设置请求时是否按顺序收发 默认禁用 在某些服务器中设为YES可以提高网络性能*/@property BOOL HTTPShouldUsePipelining API_AVAILABLE(macos(10.7), ios(4.0), watchos(2.0), tvos(9.0)); 参考文章 NSURLRequestCachePolicy—iOS缓存策略 请求类NSURLRequest使用详解","categories":[],"tags":[]},{"title":"一周阅读 -【2019-29】","slug":"week-29","date":"2019-07-16T06:10:01.000Z","updated":"2019-07-16T06:16:34.509Z","comments":true,"path":"2019/07/16/week-29/","link":"","permalink":"http://sunsujun.github.io/2019/07/16/week-29/","excerpt":"","text":"iOS 开发中使用 NSURLProtocol 拦截 HTTP 请求","categories":[{"name":"一周阅读","slug":"一周阅读","permalink":"http://sunsujun.github.io/categories/一周阅读/"}],"tags":[]},{"title":"Hexo常用命令","slug":"Hexo常用命令","date":"2019-07-09T07:00:36.000Z","updated":"2019-07-09T09:46:54.178Z","comments":true,"path":"2019/07/09/Hexo常用命令/","link":"","permalink":"http://sunsujun.github.io/2019/07/09/Hexo常用命令/","excerpt":"","text":"跳转官方文档 原始命令 缩写 解释 hexo new “postName” hexo n “postName” 新建文章 hexo new page “pageName” 新建页面 hexo server hexo s 启动服务预览 hexo generate hexo g 生成静态页面 hexo deploy hexo d 部署 hexo clean 清理缓存 hexo g -d 生成静态网页并部署，两步并一步","categories":[],"tags":[]},{"title":"一周阅读 -【2019-28】","slug":"一周阅读","date":"2019-07-09T02:50:10.000Z","updated":"2019-07-16T06:16:31.892Z","comments":true,"path":"2019/07/09/一周阅读/","link":"","permalink":"http://sunsujun.github.io/2019/07/09/一周阅读/","excerpt":"","text":"iOS 性能监控 SDK —— Wedjat（华狄特）开发过程的调研和整理","categories":[{"name":"一周阅读","slug":"一周阅读","permalink":"http://sunsujun.github.io/categories/一周阅读/"}],"tags":[{"name":"week read","slug":"week-read","permalink":"http://sunsujun.github.io/tags/week-read/"}]}]}